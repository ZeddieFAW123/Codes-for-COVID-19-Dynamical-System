function main_R0_computation
    %% 1. Define model parameters
    params = struct(); 
    params.theta  = 1185; 
    params.mu     = 1/(75.6*365); 
    params.phi    = 0.0982;
    params.tau    = 0.0631;
    params.alpha  = 0.2503;
    params.delta  = 0.0034;
    params.eta    = 0.1255;
    params.sigma  = 2.8213e-4;
    params.epsilon = 1/5.2;
    params.kappa   = 0.5;
    params.psi     = 1/15;
    params.omega   = 1/15;
    params.b       = 0.7621;
    params.d       = 0.0667;
    params.rho     = 0.5314;
    params.beta_A  = 0.5;
    params.beta_I  = 1;
    params.beta_H  = 0.64;

    %% 2. Find the disease-free equilibrium (DFE)
    % At DFE, E=A=I=H=0. We solve for (S, V1, V2, R).
    % We'll use fsolve to find S^*, V1^*, V2^*, R^*.
    x0 = [1000; 100; 100; 20];  % an initial guess
    options = optimset('Display','off'); 
    [dfe_vals, ~, exitflag] = fsolve(@(x) dfeEquations(x, params), x0, options);

    if exitflag <= 0
        error('Could not find disease-free equilibrium with fsolve.');
    end

    S_star = dfe_vals(1);
    V1_star= dfe_vals(2);
    V2_star= dfe_vals(3);
    R_star = dfe_vals(4);

    % Just to show the result in Command Window
    fprintf('DFE found:\n');
    fprintf('  S*  = %g\n', S_star);
    fprintf('  V1* = %g\n', V1_star);
    fprintf('  V2* = %g\n', V2_star);
    fprintf('  R*  = %g\n\n', R_star);

    %% 3. Construct Next-Generation Matrices F and V
    % Infected compartments: X = [E, A, I, H].
    % Evaluate them at the DFE (E=A=I=H=0, S=S_star, V1=V1_star, etc.).

    % Total population at DFE (no infected compartments).
    N_star = S_star + V1_star + V2_star + R_star;

    %-----------------------------
    % 3A. Matrix F (new infection flows)
    % 
    % dE/dt has the new infection term:
    %     lambda * S = (alpha / N_star) * [beta_A * A + beta_I * I + beta_H * H] * S_star
    % Only E gets newly infected individuals. So F is nonzero only in row E wrt (A,I,H).
    %
    %  F = [0, alpha*beta_A*(S_star/N_star), alpha*beta_I*(S_star/N_star), alpha*beta_H*(S_star/N_star);
    %       0,                0,                                 0,                           0;
    %       0,                0,                                 0,                           0;
    %       0,                0,                                 0,                           0 ];
    %
    F = zeros(4);
    F(1,2) = params.alpha * params.beta_A * (S_star / N_star);  % partial wrt A
    F(1,3) = params.alpha * params.beta_I * (S_star / N_star);  % partial wrt I
    F(1,4) = params.alpha * params.beta_H * (S_star / N_star);  % partial wrt H

    %-----------------------------
    % 3B. Matrix V (transition + removal flows among E,A,I,H)
    %
    % We write the system for infected compartments only, ignoring new infections:
    % E' = - [epsilon + mu]*E          (… portion that leaves E)
    %       + 0 from A,I,H if they move into E (none do in your model).
    %
    % A' = + epsilon(1-kappa)*E - [mu + psi]*A    (since psi*rho + psi(1-rho) = psi)
    %
    % I' = + epsilon*kappa*E + psi(1-rho)*A - [mu + delta + omega]*I
    %       (where the total “omega” outflow is omega*b + omega*(1-b) = omega).
    %
    % H' = + omega*(1-b)*I - [mu + delta + d]*H
    %
    % So in the linear form  dX/dt = -V X + (some coupling terms),
    % V must be:
    %   V_EE = (epsilon + mu),  V_EA=0,          V_EI=0,           V_EH=0
    %   V_AE = -epsilon(1-kappa), V_AA=(mu+psi), V_AI=0,           V_AH=0
    %   V_IE = -epsilon*kappa,    V_IA=-psi*(1-rho), V_II=(mu+delta+omega), V_IH=0
    %   V_HE = 0,                 V_HA=0,           V_HI=-omega*(1-b),   V_HH=(mu+delta+d)
    %
    % but notice the sign convention: typically we define V as the matrix of outflows
    % from X to somewhere else, so each diagonal entry is positive.  The off-diagonal
    % terms that represent flow *into* that compartment from another infected compartment
    % appear with negative sign.  In practice, for the next-generation approach, we
    % place these in V so that dX/dt = F X – V X. Then K = F*V^(-1).
    %
    V = zeros(4);

    % Row E
    V(1,1) = params.epsilon + params.mu;   % out of E
    % (No inflows from A,I,H to E, so no off-diagonal in row E.)

    % Row A
    V(2,2) = params.mu + params.psi;       % out of A
    V(2,1) = -params.epsilon*(1-params.kappa);  % inflow from E to A is negative in V matrix

    % Row I
    V(3,3) = params.mu + params.delta + params.omega;  % out of I
    V(3,1) = -params.epsilon * params.kappa;           % inflow from E to I
    V(3,2) = -params.psi*(1-params.rho);               % inflow from A to I

    % Row H
    V(4,4) = params.mu + params.delta + params.d;      % out of H
    V(4,3) = -params.omega * (1 - params.b);           % inflow from I to H

    %% 4. Compute Next-Generation Matrix K = F * V^(-1)
    K = F / V;  % same as F * inv(V)

    %% 5. Compute R0 as spectral radius (max real eigenvalue) of K
    eigenvalues = eig(K);
    R0 = max(real(eigenvalues));

    fprintf('The basic reproduction number R0 = %g\n', R0);
end

%% -- Function to solve for the disease-free equilibrium (DFE)
function eqs = dfeEquations(x, params)
    % x = [S, V1, V2, R], with E=0, A=0, I=0, H=0.
    S  = x(1);
    V1 = x(2);
    V2 = x(3);
    R  = x(4);

    % dS/dt = params.theta - mu*S - phi*S + tau*V1 = 0
    eqs(1) = params.theta ...
             - params.mu * S ...
             - params.phi * S ...
             + params.tau * V1;

    % dV1/dt = phi*S - tau*V1 - sigma*V1 - mu*V1 = 0
    eqs(2) = params.phi * S ...
             - params.tau * V1 ...
             - params.sigma * V1 ...
             - params.mu * V1;

    % dV2/dt = sigma*V1 - eta*V2 - mu*V2 = 0
    eqs(3) = params.sigma * V1 ...
             - params.eta * V2 ...
             - params.mu * V2;

    % dR/dt = eta*V2 - mu*R = 0
    eqs(4) = params.eta * V2 ...
             - params.mu * R;
end
